{"version":3,"sources":["config.js","component/RecipeDetails.js","component/Recipe.js","component/Alert.js","App.js","serviceWorker.js","index.js"],"names":["config","RecipeDetails","ingredients","map","ingredient","key","uuidv4","className","text","weight","Recipe","recipe","useState","show","setShow","label","image","url","src","alt","href","target","rel","onClick","Alert","alert","App","query","setQuery","recipes","setRecipes","setAlert","APIurl","getData","a","axios","get","result","data","more","hits","onSubmit","e","preventDefault","type","placeholder","autoComplete","onChange","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f9d53382.chunk.js","sourcesContent":["export const config = {\r\n  apiId: \"26bb0275\",\r\n  apiKey: \"dbfd9b2fe93f1d74b0b88f68c75e7cc8\",\r\n};\r\n","import React from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nfunction RecipeDetails({ ingredients }) {\r\n  return ingredients.map((ingredient) => {\r\n    return (\r\n      <ul key={uuidv4()} className=\"ingredient-list\">\r\n        <li className=\"ingredient-text\">{ingredient.text}</li>\r\n        <li className=\"ingredient-weight\">Weight= {ingredient.weight}</li>\r\n      </ul>\r\n    );\r\n  });\r\n}\r\n\r\nexport default RecipeDetails;\r\n","import React, { useState } from \"react\";\r\nimport RecipeDetails from \"./RecipeDetails\";\r\n\r\nfunction Recipe({ recipe }) {\r\n  const [show, setShow] = useState(false);\r\n  const { label, image, url, ingredients } = recipe.recipe;\r\n  return (\r\n    <div className=\"recipe\">\r\n      <h2>{label}</h2>\r\n      <img src={image} alt={label} />\r\n      <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n        Full Information\r\n      </a>\r\n      <button onClick={() => setShow(!show)}>Ingredients</button>\r\n      {show && <RecipeDetails ingredients={ingredients} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Recipe;\r\n","import React from \"react\";\r\n\r\nfunction Alert({ alert }) {\r\n  return (\r\n    <div className=\"alert\">\r\n      <h3>{alert}</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { config } from \"./config\";\nimport axios from \"axios\";\nimport Recipe from \"./component/Recipe\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Alert from \"./component/Alert\";\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [recipes, setRecipes] = useState([]);\n  const [alert, setAlert] = useState(\"\");\n\n  const APIurl = `https://api.edamam.com/search?q=${query}&app_id=${config.apiId}&app_key=${config.apiKey}`;\n\n  const getData = async () => {\n    if (query !== \"\") {\n      const result = await axios.get(APIurl);\n      if (!result.data.more) {\n        return setAlert(\"Not Recipe Found\");\n      }\n      setRecipes(result.data.hits);\n      setQuery(\"\");\n      setAlert(\"\");\n    } else {\n      setAlert(\"Please Search Something\");\n    }\n  };\n\n  const onchange = (e) => {\n    setQuery(e.target.value);\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    getData();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Recipe Searching App</h1>\n      <form className=\"search-form\" onSubmit={onSubmit}>\n        {alert !== \"\" && <Alert alert={alert} />}\n        <input\n          type=\"text\"\n          placeholder=\"search recipe\"\n          autoComplete=\"off\"\n          onChange={onchange}\n          value={query}\n        />\n        <input type=\"submit\" value=\"search\" />\n      </form>\n      <div className=\"recipes\">\n        {recipes !== [] &&\n          recipes.map((recipe) => <Recipe key={uuidv4()} recipe={recipe} />)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}